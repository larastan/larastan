<?php

namespace Illuminate\Database\Eloquent\Relations;

/**
 * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
 * @extends Relation<TRelatedModel>
 */
class BelongsToMany extends Relation
{
    /**
     * Find a related model by its primary key or return new instance of the related model.
     *
     * @param  mixed  $id
     * @psalm-param  array<int, string>|string  $columns
     * @param  array<int, (model-property<TRelatedModel>|'*')>|model-property<TRelatedModel>|'*'  $columns
     * @return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? \Illuminate\Support\Collection<int, TRelatedModel> : TRelatedModel)
     */
    public function findOrNew($id, $columns = ['*']);

    /**
     * Get the first related model record matching the attributes or instantiate it.
     *
     * @psalm-param  array<string, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed> $attributes
     * @return TRelatedModel
     */
    public function firstOrNew(array $attributes);

    /**
     * Get the first related record matching the attributes or create it.
     *
     * @psalm-param  array<string, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed> $attributes
     * @param  array<mixed>  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function firstOrCreate(array $attributes, array $joining = [], $touch = true);

    /**
     * Create or update a related record matching the attributes, and fill it with values.
     *
     * @psalm-param  array<string, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed> $attributes
     * @psalm-param  array<string, mixed>  $values
     * @param  array<model-property<TRelatedModel>, mixed> $values
     * @param  array<mixed>  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function updateOrCreate(array $attributes, array $values = [], array $joining = [], $touch = true);

    /**
     * Find a related model by its primary key.
     *
     * @param  mixed  $id
     * @psalm-param  array<int, string>  $columns
     * @param  array<int, model-property<TRelatedModel>> $columns
     * @return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? \Illuminate\Database\Eloquent\Collection<int, TRelatedModel> : TRelatedModel)|null
     */
    public function find($id, $columns = ['*']);

    /**
     * Find multiple related models by their primary keys.
     *
     * @param  \Illuminate\Contracts\Support\Arrayable<array-key, mixed>|int[]  $ids
     * @psalm-param  array<int, string>  $columns
     * @param  array<int, model-property<TRelatedModel>> $columns
     * @return \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>
     */
    public function findMany($ids, $columns = ['*']);

    /**
     * Find a related model by its primary key or throw an exception.
     *
     * @param  mixed  $id
     * @psalm-param  array<int, string>  $columns
     * @param  array<int, model-property<TRelatedModel>> $columns
     * @return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? \Illuminate\Database\Eloquent\Collection<int, TRelatedModel> : TRelatedModel)
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function findOrFail($id, $columns = ['*']);

    /**
     * Execute the query and get the first result.
     *
     * @psalm-param  array<int, string>  $columns
     * @param  array<int, model-property<TRelatedModel>> $columns
     * @param  array<int, (model-property<TRelatedModel>|'*')>|model-property<TRelatedModel>|'*'  $columns
     * @return TRelatedModel|null
     */
    public function first($columns = ['*']);

    /**
     * Execute the query and get the first result or throw an exception.
     *
     * @psalm-param  array<int, string>  $columns
     * @param  array<int, model-property<TRelatedModel>> $columns
     * @param  array<int, (model-property<TRelatedModel>|'*')>|model-property<TRelatedModel>|'*'  $attributes
     * @return TRelatedModel
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function firstOrFail($columns = ['*']);

    /**
     * Create a new instance of the related model.
     *
     * @psalm-param  array<string, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  mixed[]  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function create(array $attributes = [], array $joining = [], $touch = true);

    /**
     * Get the results of the relationship.
     *
     * @return \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>
     */
    public function getResults();
}
