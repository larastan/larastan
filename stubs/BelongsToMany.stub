<?php

namespace Illuminate\Database\Eloquent\Relations;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;

/**
 * @template TRelatedModel of Model
 * @template TDeclaringModel of Model
 * @extends Relation<TRelatedModel, TDeclaringModel, Collection<int, TRelatedModel>>
 */
class BelongsToMany extends Relation
{
    /**
     * @param  Builder<TRelatedModel>  $query
     * @param  TDeclaringModel  $parent
     * @param  string  $table
     * @param  string  $foreignPivotKey
     * @param  string  $relatedPivotKey
     * @param  string  $parentKey
     * @param  string  $relatedKey
     * @param  string|null  $relationName
     */
    public function __construct(Builder $query, Model $parent, $table, $foreignPivotKey,
                                $relatedPivotKey, $parentKey, $relatedKey, $relationName = null);

    /**
     * @param Collection<int, TRelatedModel> $results
     * @return array<string, TRelatedModel>
     */
    protected function buildDictionary(Collection $results);

    /**
     * Find a related model by its primary key or return new instance of the related model.
     *
     * @param  mixed  $id
     * @param  array<int, (model-property<TRelatedModel>|'*')>  $columns
     * @phpstan-return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? \Illuminate\Support\Collection<int, TRelatedModel> : TRelatedModel)
     */
    public function findOrNew($id, $columns = ['*']);

    /**
     * Get the first related model record matching the attributes or instantiate it.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     * @return TRelatedModel
     */
    public function firstOrNew(array $attributes = [], array $values = []);

    /**
     * Get the first related record matching the attributes or create it.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     * @param  array<mixed>  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function firstOrCreate(array $attributes = [], array $values = [], array $joining = [], $touch = true);

    /**
     * Create or update a related record matching the attributes, and fill it with values.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     * @param  array<mixed>  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function updateOrCreate(array $attributes, array $values = [], array $joining = [], $touch = true);

    /**
     * Find a related model by its primary key.
     *
     * @param  mixed  $id
     * @param  array<int, (model-property<TRelatedModel>|'*')>  $columns
     * @phpstan-return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? Collection<int, TRelatedModel> : TRelatedModel)|null
     */
    public function find($id, $columns = ['*']);

    /**
     * Find multiple related models by their primary keys.
     *
     * @param  \Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>  $ids
     * @param  array<int, (model-property<TRelatedModel>|'*')>  $columns
     * @return Collection<int, TRelatedModel>
     */
    public function findMany($ids, $columns = ['*']);

    /**
     * Find a related model by its primary key or throw an exception.
     *
     * @param  mixed  $id
     * @param  array<int, (model-property<TRelatedModel>|'*')>  $columns
     * @phpstan-return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? Collection<int, TRelatedModel> : TRelatedModel)
     * @throws ModelNotFoundException<TRelatedModel>
     */
    public function findOrFail($id, $columns = ['*']);

    /**
     * Find a related model by its primary key or call a callback.
     *
     * @param  mixed  $id
     * @param  \Closure|array<int, (model-property<TRelatedModel>|'*')>  $columns
     * @param  \Closure|null  $callback
     * @phpstan-return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? Collection<int, TRelatedModel> : TRelatedModel)|mixed
     */
    public function findOr($id, $columns = ['*'], \Closure $callback = null);

    /**
     * Add a basic where clause to the query, and return the first result.
     *
     * @param  \Closure|model-property<TRelatedModel>|'*'|array<int, (model-property<TRelatedModel>|'*')>  $column
     * @param  mixed  $operator
     * @param  mixed  $value
     * @param  'and'|'or'  $boolean
     * @return TRelatedModel|null
     */
    public function firstWhere($column, $operator = null, $value = null, $boolean = 'and');

    /**
     * Execute the query and get the first result.
     *
     * @param  array<int, (model-property<TRelatedModel>|'*')> $columns
     * @return TRelatedModel|null
     */
    public function first($columns = ['*']);

    /**
     * Execute the query and get the first result or throw an exception.
     *
     * @param  array<int, (model-property<TRelatedModel>|'*')> $columns
     * @return TRelatedModel
     * @throws ModelNotFoundException<TRelatedModel>
     */
    public function firstOrFail($columns = ['*']);

    /**
     * Save a new model and attach it to the parent model.
     *
     * @param  TRelatedModel  $model
     * @param  array<mixed>  $pivotAttributes
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function save(Model $model, array $pivotAttributes = [], $touch = true);

    /**
     * Save a new model without raising any events and attach it to the parent model.
     *
     * @param  TRelatedModel  $model
     * @param  array<mixed>  $pivotAttributes
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function saveQuietly(Model $model, array $pivotAttributes = [], $touch = true);

    /**
     * Save an array of new models and attach them to the parent model.
     *
     * @param  \Illuminate\Support\Collection<int, TRelatedModel>|array<TRelatedModel>  $models
     * @param  array<mixed>  $pivotAttributes
     * @return \Illuminate\Support\Collection<int, TRelatedModel>|array<TRelatedModel>
     */
    public function saveMany($models, array $pivotAttributes = []);

    /**
     * Create a new instance of the related model.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  mixed[]  $joining
     * @param  bool  $touch
     * @return TRelatedModel
     */
    public function create(array $attributes = [], array $joining = [], $touch = true);

    /**
     * Create an array of new instances of the related models.
     *
     * @param  iterable<array<model-property<TRelatedModel>, mixed>>  $records
     * @param  mixed[]  $joinings
     * @return array<TRelatedModel>
     */
    public function createMany(iterable $records, array $joinings = []);
}
