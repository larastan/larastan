<?php

namespace Illuminate\Database\Eloquent\Relations;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

/**
 * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
 * @template TDeclaringModel of \Illuminate\Database\Eloquent\Model
 * @template TResult
 *
 * @extends \Illuminate\Database\Eloquent\Relations\Relation<TRelatedModel, TDeclaringModel, TResult>
 */
abstract class HasOneOrMany extends Relation
{
    /**
     * Create a new has one or many relationship instance.
     *
     * @param  \Illuminate\Database\Eloquent\Builder<TRelatedModel>  $query
     * @param  TDeclaringModel                                       $parent
     * @param  string                                                $foreignKey
     * @param  string                                                $localKey
     *
     * @return void
     */
    public function __construct(Builder $query, Model $parent, $foreignKey, $localKey);

    /**
     * @param array<model-property<TRelatedModel>, mixed> $attributes
     *
     * @return TRelatedModel
     */
    public function make(array $attributes = []);

    /**
     * @param  iterable<array<model-property<TRelatedModel>, mixed>>  $records
     *
     * @return \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>
     */
    public function makeMany($records);

    /**
     * @param  array<TDeclaringModel>                                        $models
     * @param  \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>  $results
     * @param  string                                                        $relation
     *
     * @return array<TDeclaringModel>
     */
    public function matchOne(array $models, Collection $results, $relation);

    /**
     * @param  array<TDeclaringModel>                                        $models
     * @param  \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>  $results
     * @param  string                                                        $relation
     *
     * @return array<TDeclaringModel>
     */
    public function matchMany(array $models, Collection $results, $relation);

    /**
     * Match the eagerly loaded results to their many parents.
     *
     * @param  array<TDeclaringModel>                                        $models
     * @param  \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>  $results
     * @param  string                                                        $relation
     * @param  'one'|'many'                                                  $type
     *
     * @return array<TDeclaringModel>
     */
    protected function matchOneOrMany(array $models, Collection $results, $relation, $type);

    /**
     * Build model dictionary keyed by the relation's foreign key.
     *
     * @param  \Illuminate\Database\Eloquent\Collection<int, TRelatedModel> $results
     *
     * @return array<array<TRelatedModel>>
     */
    protected function buildDictionary(Collection $results);

    /**
     * Find a model by its primary key or return new instance of the related model.
     *
     * @param  mixed                                            $id
     * @param  array<int, (model-property<TRelatedModel>|'*')>  $columns
     *
     * @return ($id is (\Illuminate\Contracts\Support\Arrayable<array-key, mixed>|array<mixed>) ? \Illuminate\Support\Collection<int, TRelatedModel> : TRelatedModel)
     */
    public function findOrNew($id, $columns = ['*']);

    /**
     * Get the first related model record matching the attributes or instantiate it.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     *
     * @return TRelatedModel
     */
    public function firstOrNew(array $attributes = [], array $values = []);

    /**
     * Get the first related record matching the attributes or create it.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     *
     * @return TRelatedModel
     */
    public function firstOrCreate(array $attributes = [], array $values = []);

    /**
     * Create or update a related record matching the attributes, and fill it with values.
     *
     * @param  array<model-property<TRelatedModel>, mixed>  $attributes
     * @param  array<model-property<TRelatedModel>, mixed>  $values
     *
     * @return TRelatedModel
     */
    public function updateOrCreate(array $attributes, array $values = []);

    /**
     * Attach a model instance to the parent model.
     *
     * @param  TRelatedModel  $model
     *
     * @return TRelatedModel|false
     */
    public function save(Model $model);

    /**
     * Attach a model instance without raising any events to the parent model.
     *
     * @param  TRelatedModel  $model
     *
     * @return TRelatedModel|false
     */
    public function saveQuietly(Model $model);

    /**
     * Attach a collection of models to the parent instance.
     *
     * @param  iterable<TRelatedModel>  $models
     *
     * @return iterable<TRelatedModel>
     */
    public function saveMany($models);

    /**
     * @param array<model-property<TRelatedModel>, mixed> $attributes
     *
     * @return TRelatedModel
     */
    public function create(array $attributes = []);

    /**
     * Create a new instance of the related model. Allow mass-assignment.
     *
     * @param  array<model-property<TRelatedModel>, mixed> $attributes
     *
     * @return TRelatedModel
     */
    public function forceCreate(array $attributes = []);

    /**
     * Create a Collection of new instances of the related model.
     *
     * @param  iterable<array<model-property<TRelatedModel>, mixed>>  $records
     *
     * @return \Illuminate\Database\Eloquent\Collection<int, TRelatedModel>
     */
    public function createMany(iterable $records);

    /**
     * Set the foreign ID for creating a related model.
     *
     * @param  TRelatedModel  $model
     *
     * @return void
     */
    protected function setForeignAttributesForCreate(Model $model);
}
